#
name: deploy-app-image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - docker*
    paths:
      - ".docker/**/*.app*"
      - ".docker/docker.version"

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Secure disk space for the build
        run: bash .github/scripts/free-disk-space.sh

      - name: Version from version file
        uses: c-py/action-dotenv-to-setenv@v5
        with:
          env-file: ./.docker/docker.version

      - name: Common environment Variables from Dotenv
        uses: c-py/action-dotenv-to-setenv@v5
        with:
          # use branch name as suffix for dotfile
          env-file: ./.docker/docker.common.env

      - name: Environment Variables from Dotenv
        uses: c-py/action-dotenv-to-setenv@v5
        with:
          # use branch name as suffix for dotfile
          env-file: ./.docker/docker.app.env

        # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_VERSION }}-${{ env.IMAGE_VARIANT }}
            # set latest tag for docker branch
            type=raw,value=latest-${{ env.IMAGE_VARIANT }}
            type=raw,value=latest

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./.docker/Dockerfile.app
          build-args: |
            ARG_USERNAME=${{ env.CONTAINER_USERNAME }}
            ARG_USER_UID=${{ env.CONTAINER_USER_UID }}
            ARG_USER_GID=${{ env.CONTAINER_USER_GID }}
            ARG_WORKSPACE_ROOT=${{ env.CONTAINER_WORKSPACE_ROOT }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
